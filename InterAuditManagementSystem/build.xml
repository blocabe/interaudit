<project name="interaudit-web" default="help" basedir=".">
	
	
	
	
	

<!-- ===================== Property Definitions =========================== -->

    <!-- 
         All properties should be defined in this section.
	 Any host-specific properties should be defined 
	 in the build.properties file.

	 In this app, the following properties are defined in build.properties:

	 o  tomcat.home     - the home directory of your Tomcat installation
	 o  webapps.home    - the place to copy the war file to deploy it
    -->

  <property file="build.properties" />
  <property file="versioning.properties" />
	
  <tstamp>
	        <format property="TODAY" pattern="dd-MM-yyyy" />
  </tstamp>

  <property name="app.home"          		value="."/>
  <property name="app.name"          		value="InterAuditWeb"/>
  <property name="javadoc.pkg.top"   		value="web"/>

  <property name="src.home"          		value="${app.home}/src"/>
  <property name="context.home"             value="${src.home}/context"/>
  <property name="persistence.home"         value="${src.home}/META-INF"/>
  <property name="web.home"          		value="${app.home}/WebContent"/>	
  <property name="lib.home"          		value="${web.home}/WEB-INF/lib"/>
	
  <property name="object.home"       		value="${app.home}/bin"/>
  <property name="deploy.home"       		value="${app.home}/deploy"/>
	<!--
  <property name="doc.home"          		value="${app.home}/docs"/>	
  -->

  <property name="build.home"               value="${app.home}/deploy"/>
  <property name="build.classes"            value="${build.home}/WEB-INF/classes"/>
  <property name="build.lib"                value="${build.home}/WEB-INF/lib"/>
  <property name="dist.home"                value="${app.home}/dist"/>



<!-- ==================== Compilation Classpath =========================== -->

    <!-- 
         This section creates the classpath for compilation.
    -->

  <path id="compile.classpath">
    <!-- The object files for this application -->
    <pathelement location="${object.home}"/>

    <!-- The lib files for this application -->
    <fileset dir="${lib.home}">
      <include name="*.jar"/>
      <include name="*.zip"/>
    </fileset>
  	
  	
  	
 

    <!-- All files/jars that Tomcat makes available 
    <fileset dir="${tomcat.home}/common/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${tomcat.home}/common/classes"/>
    -->
  </path>
  


<!-- ==================== Build Targets below here========================= -->


<!-- ==================== "help" Target =================================== -->

    <!--
         This is the default ant target executed if no target is specified.
	 This helps avoid users just typeing 'ant' and running a 
	 default target that may not do what they are anticipating...
    -->

 <target name="help" >
   <echo message="Please specify a target! [usage: ant &lt;targetname&gt;]" />
   <echo message="Here is a list of possible targets: "/>
   <echo message="  clean-all.....Delete build dir, all .class and war files"/>
   <echo message="  prepare.......Creates directories if required" />
   <echo message="  compile.......Compiles source files" />
   <echo message="  build.........Build war file from .class and other files"/>
   <echo message="  deploy........Copy the app and Axis war files to Tomcat" />
   <echo message="  javadoc.......Generates javadoc for this application" />
 </target>

<!-- ==================== "clean-all" Target ============================== -->
    
    <!--
          This target should clean up any traces of the application
	  so that if you run a new build directly after cleaning, all
	  files will be replaced with what's current in source control
    -->

 <target name="clean-all" >
    <delete dir="${build.home}"/>
    <delete dir="${object.home}"/>
    <delete dir="${deploy.home}"/>
    <!-- can't delete directory if Tomcat is running -->
    <delete dir="${webapps.home}/${app.name}" failonerror="false"/>  
    <!-- deleting the deployed .war file is fine even if Tomcat is running -->
    <delete dir="${webapps.home}/${app.name}.war" />                
    <!-- delete the javadoc 
    <delete dir="${doc.home}"/>  
    -->  
    <delete dir="${dist.home}"/>
 </target>

<!-- ==================== "prepare" Target ================================ -->
 
    <!--
          This target is executed prior to any of the later targets
	  to make sure the directories exist. It only creates them 
	  if they need to be created....
	  
	  Other, similar, preparation steps can be placed here.
	  
	  
    -->

  <target name="prepare" depends="clean-all">

    <echo message="Tomcat Home  = ${tomcat.home}" />
    <echo message="webapps Home = ${webapps.home}" />
    <mkdir  dir="${object.home}"/>
    <mkdir  dir="${deploy.home}"/>
  	<!--
    < mkdir  dir="${doc.home}"/>
     
    <mkdir  dir="${doc.home}/api"/>
    -->
    <mkdir dir="${build.home}"/>
  	<mkdir dir="${build.home}/META-INF"/>
    <mkdir dir="${build.home}/style"/>
    <mkdir dir="${build.home}/script"/>
  	<mkdir dir="${build.home}/script/scriptaculous"/>  	
    <mkdir dir="${build.home}/images"/>
     <mkdir dir="${build.home}/css" />
    <mkdir dir="${build.home}/secure"/>
    <mkdir dir="${build.home}/secure/admin"/>
    <mkdir dir="${build.home}/WEB-INF"/>
    <mkdir dir="${build.home}/WEB-INF/classes"/>
    <mkdir dir="${build.home}/WEB-INF/classes/META-INF"/>
    <mkdir dir="${build.home}/WEB-INF/lib"/>
    <mkdir dir="${dist.home}"/>
  </target>

<!-- ==================== "compile" Target ================================ -->

    <!-- 
          This only compiles java files that are newer
	  than their corresponding .class files. 
     -->

  <target name="compile" depends="prepare"  >
  	     	
    <javac srcdir="${src.home}" destdir="${object.home}"  debug="yes" >
        <classpath refid="compile.classpath"/>
    </javac>
  </target>

<!-- ==================== "build" Target ================================== -->

    <!-- 
          This target builds the war file for the application
	  by first building the directory structure of the 
          application in ${build.home} and then creating the
	  war file using the ant <war> task
    -->

  <target name="build" depends="compile" >

    <!-- Copy all the webapp content (jsp's, html, tld's, xml, etc. -->
    <!-- Note that this also copies the META-INF directory -->
    <copy    todir="${build.home}">
      <fileset dir="${web.home}"/>
    </copy>
  	
  	
    
    <copy todir="${build.home}/style">
            <fileset dir="${web.home}/style" />
    </copy>
  	
  	<copy todir="${build.home}/script/scriptaculous">
  	       <fileset dir="${web.home}/script/scriptaculous" />
  	</copy>
  	
    
 	<copy todir="${build.home}/script">
 	            <fileset dir="${web.home}/script" />
 	</copy>
 	
    <copy todir="${build.home}/images">
    	<fileset dir="${web.home}/images" />
    </copy>
    
    <copy todir="${build.home}/css">
    	<fileset dir="${web.home}/css" />
    </copy>
  	
    <copy todir="${build.home}/secure/admin">
    	<fileset dir="${web.home}/secure/admin" />
    </copy>
    
    <!-- Now, copy all the Java class files -->
    <copy    todir="${build.home}/WEB-INF/classes">
      <fileset dir="${object.home}"/>
    </copy>
    

    <copy    todir="${build.home}/WEB-INF/classes/META-INF">
      <fileset dir="${persistence.home}"/>
    </copy>
    
    
    <!-- Now, copy all the properties files, etc that go on the classpath -->
    <copy    todir="${build.home}/WEB-INF/classes">
      <fileset dir="${src.home}">
         <include name="**/*.properties" />
         <include name="**/*.prop" />
      </fileset>
    </copy>

    <!-- Now, copy all the jar files we need -->
    <copy    todir="${build.home}/WEB-INF/lib">
      <fileset dir="${lib.home}" />
    </copy>   
  	
  	 <!-- Now, copy the template vm file we need -->
  	<copy file="${web.home}/templates/template_email.vm" 
  	        toFile="${build.classes}/com/interaudit/util/template_email.vm" />
  
  	<copy file="${web.home}/templates/reminder_invoice_email.vm" 
  	            toFile="${build.classes}/com/interaudit/util/reminder_invoice_email.vm" />
  	
  	<copy file="${web.home}/templates/approbation_invoice_email.vm" 
  	                toFile="${build.classes}/com/interaudit/util/approbation_invoice_email.vm" />
  	
  	<copy file="${web.home}/templates/missiontoclose_email.vm" 
  	                    toFile="${build.classes}/com/interaudit/util/missiontoclose_email.vm" />
  	
  	
  	<copy file="${web.home}/templates/reminder_missions_without_invoices_email.vm" 
  	                toFile="${build.classes}/com/interaudit/util/reminder_missions_without_invoices_email.vm" />
  	
  	
  	<copy file="${web.home}/templates/reminder_missions_alerts_email.vm" 
  	                    toFile="${build.classes}/com/interaudit/util/reminder_missions_alerts_email.vm" />
   
             
  </target>
	
	
	<target name="increment" depends="build">
	        <propertyfile file="versioning.properties">
	            <entry key="build_version" type="int" operation="+" default="0"/>
	        </propertyfile>
	        <property file="build_version"/>
	        <echo message="Build number is ${build_version}"/>
	    </target>



	    <target name="makeManifest" depends="increment">
	        <echo>Creating Manifest file</echo>
	            
	        <manifest file="${build.home}/META-INF/MANIFEST.MF">
	              <attribute name="Specification-Title" value="InterAudit"/>
	              <attribute name="Specification-Version" value="1"/>
	              <attribute name="Specification-Vendor" value="Blocail Enterprise Software"/>
	              <attribute name="Implementation-Title" value="InterAudit"/>
	              <attribute name="Implementation-Version" value="${major_version}.${minor_version}.${build_version} Built ${TODAY}"/> 
	              <attribute name="Implementation-Vendor" value="Blocail Enterprise Software"/>
	        </manifest>
	    </target>




<!-- ==================== "deploy" Target ================================= -->

    <!-- 
         This target simply copies the war file from the deploy
	 directory into the Tomcat webapp directory.
	 This version of the file makes sure our files are
	 deployed into the Axis server webapp as well.

    -->

  <target name="deploy" depends="makeManifest" >

    <!-- Copy the contents of the build directory 
    <copy todir="${webapps.home}"  file="${dist.home}/${app.name}.war" />
    -->
	    <copy    todir="${build.home}/META-INF">
	      <fileset dir="${context.home}"/>
	    </copy>
  	 <!-- Create the <war> file -->
  	    <jar jarfile="${dist.home}/${app.name}.war"
  	        manifest="${build.home}/META-INF/MANIFEST.MF" basedir="${build.home}"/>   
    
  </target>


<!-- ==================== "doc" Target ==================================== -->

    <!-- 
         This task creates javadoc. It is dependent upon only the
	 'compile' target so it is not executed in a normal build.
         As a result, the target needs to be run on its own.
    -->

  <target name="javadoc" depends="compile">
  	<!--
      <javadoc sourcepath = "${src.home}"
                  destdir = "${doc.home}/api"
             packagenames = "${javadoc.pkg.top}.*"/>
              -->
  </target>

</project>
